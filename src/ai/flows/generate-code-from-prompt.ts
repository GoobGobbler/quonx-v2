// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that generates code from a prompt, potentially using a specific Ollama model.
 *
 * - generateCodeFromPrompt - A function that handles the code generation process.
 * - GenerateCodeFromPromptInput - The input type for the generateCodeFromPrompt function.
 * - GenerateCodeFromPromptOutput - The return type for the generateCodeFromPrompt function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateCodeFromPromptInputSchema = z.object({
  prompt: z.string().describe('The prompt describing the application to build.'),
  previousCode: z.string().optional().describe('The code from the previous successful build, if any.'),
  ollamaModel: z.string().optional().describe('The specific Ollama model to use for generation.'), // Added optional model parameter
});
export type GenerateCodeFromPromptInput = z.infer<typeof GenerateCodeFromPromptInputSchema>;

const GenerateCodeFromPromptOutputSchema = z.object({
  code: z.string().describe('The generated code for the application.'),
});
export type GenerateCodeFromPromptOutput = z.infer<typeof GenerateCodeFromPromptOutputSchema>;

export async function generateCodeFromPrompt(input: GenerateCodeFromPromptInput): Promise<GenerateCodeFromPromptOutput> {
  return generateCodeFromPromptFlow(input);
}

// Note: The prompt definition itself doesn't change, as the model selection happens
// at the flow invocation level.
const prompt = ai.definePrompt({
  name: 'generateCodeFromPromptPrompt',
  input: {schema: GenerateCodeFromPromptInputSchema},
  output: {schema: GenerateCodeFromPromptOutputSchema},
  prompt: `You are an expert software developer that can write code based on a prompt.

  Generate the code for the following application based *only* on the user prompt and optional previous code.
  Produce complete, runnable code for the requested file or component.
  Adhere strictly to the format and language requested in the prompt.

  User Prompt:
  {{{prompt}}}

  {{#if previousCode}}
  Here is the code from the previous successful build. Incorporate it into the current build only if it is directly relevant to the current prompt and helps fulfill the request. Do not reuse it otherwise.
  Previous Code:
  {{{previousCode}}}
  {{/if}}

  Generate the new code now:`,
});

const generateCodeFromPromptFlow = ai.defineFlow(
  {
    name: 'generateCodeFromPromptFlow',
    inputSchema: GenerateCodeFromPromptInputSchema,
    outputSchema: GenerateCodeFromPromptOutputSchema,
  },
  async input => {
    // Conditionally select the model based on the input
    const modelToUse = input.ollamaModel
      ? ai.model(`ollama/${input.ollamaModel}`) // Construct the model name dynamically
      : undefined; // Use the default model configured in genkit.ts if not provided

    const {output} = await prompt(input, { model: modelToUse }); // Pass the selected model to the prompt invocation
    return output!;
  }
);
